{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","email","name","id","className","src","alt","CardList","robots","cardArray","map","user","i","Error","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","console","log","filterRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAaeA,EAXF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UAEI,qBAAKC,IAAG,+BAA0BF,EAA1B,0BAAsDG,IAAI,WAClE,6BAAKJ,IACL,4BAAID,QCYDM,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAClC,IAAKD,EACH,MAAM,IAAIE,MAAM,eAElB,OACE,cAAC,EAAD,CAEEV,GAAIK,EAAOI,GAAGT,GACdD,KAAMM,EAAOI,GAAGV,KAChBD,MAAOO,EAAOI,GAAGX,OAHZW,MAOX,OAAO,8BAAMH,KCDAK,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,sBAAKZ,UAAU,MAAf,UACE,uBACEA,UAAU,gCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,IALd,QCYWI,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,EAAMK,YCQEC,E,kDAhBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAW,GAHD,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAOG,KAAKJ,MAAMC,SAAW,yDAAmCG,KAAKX,MAAMK,a,GAbxDQ,aC4DZC,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAqBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SArB1C,EAAKZ,MAAQ,CACXpB,OAAQ,GACR8B,YAAa,IAJH,E,qDASd,WAAqB,IAAD,OAElBG,MAAM,8CACHC,MAAK,SAACC,GAEL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKZ,SAAS,CAAEzB,OAAQqC,OAE5BC,QAAQC,IAAI,oB,oBAOd,WAAU,IAAD,EACyBf,KAAKJ,MAA7BpB,EADD,EACCA,OAAQ8B,EADT,EACSA,YACVU,EAAexC,EAAOyC,QAAO,SAACC,GAClC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASd,EAAYa,kBAEvD,OAAQ3C,EAAO6C,OAGb,sBAAKjD,UAAU,KAAf,UACE,gDACA,cAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU5B,OAAQwC,WAPxB,oBAAI5C,UAAU,YAAd,4B,GAjCY8B,cCFHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.a94f079b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({email, name, id}) =>{    \n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n            {/*Will use robohash api to generate random robots*/}\n            <img src={`https://robohash.org/${id}?size=200x200&set=set4`} alt='robots' />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardArray = robots.map((user, i) => {\n    if (!user) {\n      throw new Error(\"Nooooooooo!\");\n    }\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n      ;\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"1px solid black\",\n        height: \"700px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n    render(){   \n        return this.state.hasError ? <h1>Ooops. That is not good</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../Components/CardList\";\nimport SearchBox from \"../Components/SearchBox\";\nimport Scroll from \"../Components/Scroll\";\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\n// import { robots } from \"./robots\"; //if there is no default, you have to destructure it by putting it in brackets - array/object destructuring\nimport \"./App.css\";\n\n//this is called a smart component because it has state\n\n//any component that has state needs to be a class component with a constructor that declares the state of the application\n//make sure you call the super() before your state declaration\n//react uses the stat to render and pass a props to the child components. We manage the state in the parent which passes down props.\n//everytime the state changes, render will run.. the virtual dom will detect it and rerun the application\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  //this is a lifecycle hook that gets ran automarically with react (check documentation)\n  componentDidMount() {\n    //fetch is located in the window object and is used to make server requests.\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        //convert the response to json\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n    console.log(\"robots loaded!\");\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filterRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1 className=\"pa3 f-5-l\">Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1>Random Kitties</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filterRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}